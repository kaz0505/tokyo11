- name: 開場
  name_en: Doors Open
  type: other
  starts_at: "9:30"

- name: 開会の挨拶
  name_en: Opening
  type: other
  starts_at: "9:50"

- name: まつもとゆきひろ
  name_en: Yukihiro 'Matz' Matsumoto
  gravatar_url: https://www.gravatar.com/avatar/0ec4920185b657a03edf01fff96b4e9b
  affi: 日経Linuxライター
  desc: To Be Announced...
  desc_en: 
  twitter: yukihiro_matz
  github: matz
  type: invited_talk
  title: Streem
  title_en: Streem
  abstract: To Be Announced...
  abstract_en:
  knowledge: To Be Announced...
  starts_at: "10:10"

- name: 小崎資広
  name_en: Motohiro Kosaki
  gravatar_url: https://www.gravatar.com/avatar/02da662c083396641da96c1d32fc86ed
  affi:
  desc: To Be Announced...
  desc_en: 
  twitter: kosaki55tea
  github: kosaki
  type: invited_talk
  title: To Be Announced...
  title_en: To Be Announced...
  abstract: To Be Announced...
  abstract_en:
  knowledge: To Be Announced...
  starts_at:

- name: 栗原 勇樹
  name_en: Yuki Kurihara
  gravatar_url: https://www.gravatar.com/avatar/77897395d9b84463bd474a69b922b2ec
  affi: 株式会社spice life
  desc: RubyKaja 2014。子育ての合間に小さいライブラリーを作るのが趣味。
  desc_en: A software engineer, one of the <a href="http://kaja.rubyist.net/">RubyKaja 2014 winners</a> and a father. He enjoys implementing a small library when he has free time.
  twitter: _ksss_
  github: ksss
  type: talk
  title: Rubyに型があると便利か
  title_en: Pseudo Type System on Struct
  abstract: <p>最近開発したgem <a href="https://github.com/ksss/type_struct">type_struct</a> を中心に「Rubyに型があると便利か」という問いについて考察します。ひいては、Ruby3への議論に貢献できればと考えています。</p>
  abstract_en: "<p>Everyone knows Ruby is a dynamic programming language, but what if it was dynamically typed? In this talk, I'll talk about whether having a type system in Ruby would be useful or not by walking through what we can do with <a href=\"https://github.com/ksss/type_struct\">type_struct</a>. Come and join me for a conversation about the future of Ruby 3 and its type system.</p>"
  knowledge: 基本的なRubyの知識があればよいです。golangやcrystalのさわりもわかっていると、より楽しめると思います。
  starts_at:

- name: ランチ
  name_en: Lunch
  type: other
  starts_at: "12:15"

- name: 奥一穂
  name_en: Kazuho Oku
  gravatar_url: http://www.gravatar.com/avatar/a1f8ed12fefd7759ef8838e62ee409a6
  affi: 
  desc: To Be Announced...
  desc_en: 
  twitter: kazuho
  github: kazuho
  type: invited_talk
  title: To Be Announced...
  title_en: To Be Announced...
  abstract: To Be Announced...
  abstract_en:
  knowledge: To Be Announced...
  starts_at: "13:20"

- name: 須藤功平
  name_en: Kouhei Sutou
  gravatar_url: http://www.gravatar.com/avatar/ee6ffca720cc428d70247dcd7377dd48
  affi: 株式会社クリアコード
  desc: <a href="http://magazine.rubyist.net/?0053-Hotlinks">http://magazine.rubyist.net/?0053-Hotlinks</a>
  desc_en: |
    Kouhei is a software programmer, the president of ClearCode, Inc., and the author of <a href="http://rabbit-shocker.org">Rabbit</a>, a presentation tool for Rubyists.
  twitter: ktou
  github: kou
  type: talk
  title: アプリケーションへのRubyインタープリターの組み込み
  title_en: Packaging A Ruby Interpreter into Your App
  abstract: <p>発表者はmilter managerというアプリケーションへCRubyを組み込んだ経験と、Groongaというアプリケーションへmrubyを組み込んだ経験があります。</p><p>milter managerはメールフィルターアプリケーションです。大量の接続を同時にさばくために、マルチプロセス+イベント駆動型のサーバープログラムとして実装しています。このアプリケーションをRubyでカスタマイズするためにCRubyを組み込みました。このケースでうまく動かすためのGC、fork、シグナル、イベントループ回りの実装について紹介します。</p><p>Groongaは全文検索エンジンです。より高速に検索結果を返すために、細部もチューニングして実装しています。（細部は私は実装していません。）このアプリケーションのクエリーオプティマイザー、クエリー言語（の一部）をRubyで実現するためにmrubyを組み込みました。このケースでうまく動かすためのオブジェクトのライフサイクルの実装について紹介します。</p><p>時間次第ではmilter managerの話だけにするかもしれません。</p>
  abstract_en: "<p>I have experience of packaging CRuby into an application known as milter manager. milter manager is an email filtering application. As it should be able to handle a large number of simultaneous connections, it has been implemented as multi-processing and event-driven server program. I've made a self-contained package in order to be able to customize it using Ruby. In this talk, I'll talk about the implementation of the elements needed for this case to work successfully: GC, forks, signals, and event loops.</p>"
  knowledge: マルチプロセスとGCとシグナルとイベントループについての一般的な知識。
  starts_at:

- name: 辻本 和樹
  name_en: Kazuki Tsujimoto
  gravatar_url: http://www.gravatar.com/avatar/303dd57f37d64288bb4f0336332a8882
  affi: 株式会社野村総合研究所
  desc: Rubyコミッタ/power_assert開発者
  desc_en: A Ruby committer/power_assert developer
  twitter: k_tsj
  github: k-tsj
  type: talk
  title: "Re: Pattern Matching in Ruby"
  title_en: "Re: Pattern Matching in Ruby"
  abstract: <p>Rubyでパターンマッチを実現するためのライブラリであるpattern-matchに関する発表です。</p><p>本ライブラリについてはSapporo RubyKaigi 2012の<a href="http://sapporo.rubykaigi.org/2012/ja/schedule/details/11.html">Pattern Matching in Ruby</a>というセッションで機能概要を紹介したことがありますが、今回はメタプログラミングやRefinementsといったRubyならではの表現力をフル活用している実装面についてその舞台裏をお見せします。</p>
  abstract_en: <p>I'll talk about implementation details of the pattern-match gem which uses Ruby's powerful features like metaprogramming and Refinements.</p>
  knowledge: ScalaやHaskellにおけるパターンマッチの機能を知っていると内容が理解しやすいと思いますが必須ではありません。
  starts_at:

- name: 田中 和明
  name_en: Kazuaki Tanaka
  gravatar_url: https://www.gravatar.com/avatar/REPLACE-THIS-URL-WITH-YOURS
  affi: 九州工業大学
  desc: To Be Announced...
  desc_en: Associate Professor in the Department of Mechanical Information Science and Technology at Kyushu Institute of Technology
  twitter:
  github: kaz0505
  type: talk
  title: mruby/c
  title_en: mruby/c
  abstract: <p>OSS版のmrubyよりも小さな資源で動作するVMの実装です．40KB程度のメモリで動作しています．ワンチップマイコンを想定した実装になっていて，多くのクラスを削減しています．そのため，一般的なRubyプログラムには向きませんが，組込みシステムでの機器制御やIoT分野への適用を目指しています．</p>
  abstract_en: <p>mruby is a lightweight Ruby interpreter with the intention of being easily embeddable. mruby/c is a VM implementation that works on even less resources than the OSS version of mruby. It works with around 40KB of memory. This implementation assumes the use of a one-chip microcomputer, so it has a considerably reduced number of classes. Therefore, it is not suitable for general Ruby programming; however, its application is aimed at the control of embedded system devices and the development of IoT products.</p>
  knowledge: mruby
  starts_at:

- name: 休憩
  name_en: Break
  type: other
  starts_at: "15:25"

- name: Aaron Patterson
  name_en: Aaron Patterson
  gravatar_url: https://www.gravatar.com/avatar/f29327647a9cff5c69618bae420792ea
  affi:
  desc: To Be Announced...
  desc_en: 
  twitter: tenderlove
  github: tenderlove
  type: invited_talk
  title: To Be Announced...
  title_en: To Be Announced...
  abstract: To Be Announced...
  abstract_en:
  knowledge: To Be Announced...
  starts_at: "16:00"

- name: 村田 賢太
  name_en: Kenta Murata
  gravatar_url: https://www.gravatar.com/avatar/7cca11c5257fda526eeb4b1ada28f904
  affi: Cookpad Inc. / Ruby committer
  desc: クックパッドにてソフトウェアエンジニアとして働きながら、プライベートでは BigDecimal のメンテナとして Ruby の開発に携わっている。
  desc_en: A Ruby committer as a BigDecimal maintainer, and working for Cookpad Inc. as a software engineer.
  twitter: mrkn
  github: mrkn
  type: talk
  title: "IMF: Image Manipulation Framework"
  title_en: "IMF: Image Manipulation Framework"
  abstract: <p>発表者は、Ruby のための画像操作ライブラリを昨年終盤から開発しています。本発表では、このまだ開発途上のライブラリについて、いま何ができるのか、そして将来どうしようと考えているかをご説明します。</p><p>IMF の開発が順調に進めば、いずれ RMagick は不要になります。そういう世界を速く実現するため、本発表を聞いて興味を持った人が開発に協力してくれるようになると嬉しいです。</p>
  abstract_en: <p>The speaker has started to develop a library for manupilating images.  In this talk the speaker will demonstrate what we can do with the library, and explain the future development plans.</p><p>The speaker hopes to make RMagick needless with this library as soon as possible.  To realize such world asap, the speaker wants to gather the people who are interested in this library.</p>
  knowledge: JPEG とか PNG とか WEBP などのビットマップ画像を扱ったことがあり、Ruby で画像を処理したいなぁと思ったことがある人向けです。RMagick を使ったことがある人はなお良いです。
  starts_at:

- name: 遠藤侑介
  name_en: Yusuke Endoh
  gravatar_url: https://www.gravatar.com/avatar/e73159002200b33d51b7a6a312f2440e
  affi:
  desc: |
      <code>'Ruby コミッタ。かつてはテスト、コードカバレッジ、リリースマネジメントなどを担当していた。高速化にはあまり興味がない。また、この説明文のように役に立たないプログラムを書く「超絶技巧プログラミング」を提唱・実践している。'.tap{|s|printf(t=%{'%s'.tap{|s|printf(t=%%{%s},s,t)}},s,t)}</code>
  desc_en: |
      <code>'A Ruby committer.  He used to engage in testing, code coverage, and release management.  He is not so interested in performance improvement.  He is an advocate of "transcendental programming" that creates a useless program like this description.'.tap{|s|printf(t=%{'%s'.tap{|s|printf(t=%%{%s},s,t)}},s,t)}</code>
  twitter: mametter
  github: mame
  type: talk
  title: "Optcarrot: A pure-ruby NES emulator"
  title_en: "Optcarrot: A pure-ruby NES emulator"
  abstract: <p>Ruby の高速化を煽るためのベンチマークプログラムとして、任天堂の家庭用ゲーム機であるファミリーコンピュータのエミュレータ Optcarrot を Ruby で開発した。高速な Ruby プログラムを書くための工夫と、各種 Ruby 処理系のベンチマーク結果を紹介し、MRI の最適化方針について議論する。</p>
  abstract_en: <p>We developed a Nintendo Entertainment System (NES) emulator in Ruby, called Optcarrot, as a non-trivial benchmark program for driving performance improvement of Ruby implementations.  We present ProTips(TM) for writing a fast Ruby program and a benchmark result of some Ruby implementations, and discuss some promising approaches to improve performance of MRI.</p>
  knowledge: ハードウェアに関する基礎的な知識があると望ましい。
  knowledge_en: Basic understanding about hardware will be helpful.
  starts_at:

- name: 休憩
  name_en: Break
  type: other
  starts_at: "17:40"

- name: 古橋 貞之
  name_en: Sadayuki Furuhashi
  gravatar_url: https://www.gravatar.com/avatar/aba3c1870b6cea67493617e5a343b586
  affi: Treasure Data, Inc. Founder & Software Architect
  desc: 分散データベース「PlazmaDB」や分散Key-Valueストア「Kumofs」など、十年にわたって分散システムの開発に携わる。また、バイナリシリアライズ形式『MessagePack』、ログコレクタ『Fluentd』、並列ETL『Embulk』などのオープンソースプロジェクトを創始した。
  desc_en: An OSS hacker. He founded successful projects including MessagePack - a binary serialization format, Fluentd - streaming log collector, and Embulk - a parallel ETL. He has been working on distributed systems for a decade, and developing a distributed storage named "PlazmaDB" at Treasure Data.
  twitter: frsyuki
  github: frsyuki
  type: keynote
  title: 分散ワークフローエンジン『Digdag』の実装
  title_en: '"Digdag" - Implementation of A Distributed Workflow Engine'
  abstract: <p>ワークフローエンジンは、依存関係のある複数のタスクを実行するツールです。古典的なMakefileを始め、Python製のLuigi、商用のJP1/AJS3など、様々な実装があります。Digdagは、現在活発に開発が進んでいる新しいワークフローエンジンです。このセッションでは、ツリー構造を持つワークフローの状態遷移を効率的に実行する手法、ワークフローの実行状態の永続化と分散実行、タスクスケジューラ、Dockerによるサンドボックス化など、その実装手法を紹介しながらワークフローエンジンの構成技術について解説します。</p>
  abstract_en: <p>A workflow engine is a tool that processes multiple tasks with dependencies. Historically, there are a lot of implementations including traditional Makefile, open-source Python software "Luigi", and "JP1/AJS3" made by Hitachi. Digdag is a new workflow engine that is in active development. In this session, I'll cover implementation techniques used in workflow engines by explaining details of Digdag such as efficient state transition of nodes in a tree structure, persistent store and transfer of execution state of tasks over network, fair task scheduling, and sandboxed task execution in Docker containers.</p>
  knowledge: SQLの基本的な知識と、Rubyのリフレクション、オプティマイザなどの知識があると、より楽しめると思います。
  starts_at: "18:00"
